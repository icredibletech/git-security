name: iCredible File Security Repository Restore

on:
  workflow_dispatch:
    inputs:
      RESTORE_OTP_INPUT:
        description: 'Enter OTP if available, leave empty to receive OTP via email'
        required: false
        default: ''

jobs:
  restore:
    name: Repository Restore
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v8
        with:
          # workflow: icredible-file-security-backup.yml
          workflow_search: true
          workflow_conclusion: success
          # Optional, no need to specify if PR is
          commit: ${{github.event.pull_request.head.sha}}
          name: ic-context
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          # check_artifacts: false
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          # search_artifacts: false
          if_no_artifact_found: fail

      - name: Set Artifact Contents As Environment Variables
        run: |
          cat ic-context
          cat ic-context >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Check if OTP is Provided
        id: check_otp
        run: |
          if [ -z "${{ github.event.inputs.RESTORE_OTP_INPUT }}" ]; then
            echo "OTP is not provided, requesting OTP..."
            echo "REQUEST_OTP=true" >> $GITHUB_ENV
          else
            echo "OTP provided, skipping request..."
            echo "REQUEST_OTP=false" >> $GITHUB_ENV
            echo "USER_OTP=${{ github.event.inputs.RESTORE_OTP_INPUT }}" >> $GITHUB_ENV
          fi

      - name: Get Activation Token
        id: get_token
        run: |
          echo "Requesting activation token..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" -H "Content-Type: application/json" -d '{
            "activationCode": "${{ secrets.ICREDIBLE_ACTIVATION_CODE }}",
            "uniqueId": "${{ github.repository_id }}",
            "ip": "${{ runner.ip }}",
            "operatingSystem": "Linux",
            "endpointType": "Workstation",
            "endpointName": "Github Endpoint (${{ github.repository }})"
          }')
          echo "Raw API Response: $RESPONSE"
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          JSON_BODY=$(echo "$RESPONSE" | head -n -1)

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to obtain activation token. Response: $RESPONSE"
            echo "Error: Received HTTP status $HTTP_STATUS"
            echo "Response: $JSON_BODY"
            exit 1
          fi

          TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Request OTP for Restore (If Needed)
        if: env.REQUEST_OTP == 'true'
        id: request_otp
        run: |
          echo ${{ env.FILE_ID }}
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/OTP/Send" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d '{
            "Source": "FileDownload",
            "OtpGenerationMode": "Alphanumeric",
            "Type": "MAIL",
            "ScopeEntities": ["${{ env.FILE_ID }}"]
          }')
          echo "Raw API Response: $RESPONSE"
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          JSON_BODY=$(echo "$RESPONSE" | head -n -1)

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to obtain OTP. Response: $RESPONSE"
            echo "Error: Received HTTP status $HTTP_STATUS"
            echo "Response: $JSON_BODY"
            exit 1
          fi

          echo "UNIQUE_KEY=$(echo $JSON_BODY | jq -r '.data.uniqueKey')" >> $GITHUB_ENV
          echo "OTP request sent. Check email for verification code."

      - name: Prepare Artifact To Upload
        run: |
          echo "USER_OTP=$USER_OTP" >> ic-context
          echo "TOKEN=$TOKEN" >> ic-context
          echo "UNIQUE_KEY=$UNIQUE_KEY" >> ic-context
          cat ic-context

      # TODO FIX: Artifact file is not clearing its state
      - uses: actions/upload-artifact@v4
        with:
          name: ic-context
          path: ic-context

      - name: Retrieve Backup (If OTP Provided)
        if: env.REQUEST_OTP == 'false'
        run: |
          echo ${{ env.FILE_GUID }}
          echo "Retrieving backup file..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://dev.api.file-security.icredible.com/restore/${{ env.FILE_GUID }}" \
          -H "Authorization: Bearer $TOKEN" \
          -H "X-Verification-Key: ${{ env.USER_OTP }}" \
          -H "X-Unique-Key: ${{ env.UNIQUE_KEY }}" \
          -H "X-Scope-EntityIds: ${{ env.FILE_ID }}" -o repo.tar.zst)
          echo "Raw API Response: $RESPONSE"
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          JSON_BODY=$(echo "$RESPONSE" | head -n -1)

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to obtain backup file. Response: $RESPONSE"
            echo "Error: Received HTTP status $HTTP_STATUS"
            echo "Response: $JSON_BODY"
            exit 1
          fi

          echo "Backup file retrieved successfully."

      - name: Extract Backup (If OTP Provided)
        if: env.REQUEST_OTP == 'false'
        run: |
          echo "Extracting repository backup..."
          zstd -d repo.tar.zst -o repo.tar
          mkdir repo-backup
          tar -xf repo.tar -C .
          ls -la repo-backup
          rm -f repo.tar repo.tar.zst
          echo "Extraction complete."

      - name: Git Configuration (If OTP Provided)
        if: env.REQUEST_OTP == 'false'
        run: |
          cd repo-backup
          git config user.name "iCredible File Security"
          git config user.email "file-security@icredible.com"
          git config url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf https://github.com/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Restored Repository (If OTP Provided)
        if: env.REQUEST_OTP == 'false'
        run: |
          cd repo-backup
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push --mirror
          echo "Restored backup pushed to repository."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
